openapi: 3.1.0

info:
  title: IETF BibXML service
  description: |
    IETF BibXML service provides an open and public API for its users to fetch references from.

    NOTE: Not all 500 responses are currently provided per the spec
    (wrapped in JSON and with immutable error codes).
  contact:
    email: ietf-ribose@ribose.com
  license:
    name: BSD 3-Clause
    url: https://github.com/ietf-ribose/bibxml-service/blob/main/LICENSE
  version: {{ snapshot }}

servers:
- url: /api/v1

paths:

  /by-docid/:
    get:
      summary: Get bibliographic item by document ID
      description: >
        Retrieve a bibliographic item by document identifier.
      operationId: getBibItemByDocId

      parameters:
      - name: docid
        in: query
        description: |
          Document ID. For example, `RFC7991`.

          More valid identifier examples:
          {% for doctype in known_doctypes %}
          - `{{ doctype.1 }}`
          {% endfor %}
        required: true
        schema:
          type: string

      - name: doctype
        in: query
        description: |
          Document identifier type (optional).

          Note that the schema lists _currently available types_
          (present across indexed bibliographic items at the time of viewing this page),
          other document types can be available at different points in time
          depending on index state.
        required: false
        schema:
          $ref: '#/components/schemas/AvailableDoctypes'

      - name: format
        in: query
        description: |
          Format to return bibliographic item in.
          If `bibxml` is requested, returns an application/xml response;
          otherwise application/json response with Relaton structure under `data` key.

          (Note: `bibxml` output is not yet fully featured in this endpoint.)
        schema:
          type: string
          default: relaton
          enum: [bibxml, relaton]

      - name: anchor
        in: query
        description: |
          Only has effect when ``format`` is ``bibxml``.
          If provided, the returned XML root element will have its
          ``anchor`` attribute set to this value.
        schema:
          type: string

      security:
      - DatatrackerAPIKeyAuth: []

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BibliographicItemResponse'
            application/xml:
              schema:
                type: string
                description: |
                  RFC 7991-formatted bibliographic item
                  with ``<reference>`` or ``<referencegroup>``
                  root element.

        404:
          description: no bibliographic item found matching given document identifier type and id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/{query}/:
    parameters:
    - name: query
      in: path
      schema:
        type: string
        example: |
          %2Bnist+%22metropolitan+area%22+-%22wind+damage%22
      description: |
        Search query string. Format depends on `query_format` parameter.
        Special characters, such as forward slashes, must be URL-escaped.
    get:
      summary: Search bibliographic items
      description: |
        Find bibliographic items across indexed (non-external) datasets that match given query.

        Results are ordered by recorded date (publication, revision, etc.) from latest to oldest.

        NOTE: as of now, this API may not return the latest and complete results at all times,
        as various source indexes could be cleared and/or be mid-indexation.
      parameters:
      - name: query_format
        in: query
        schema:
          type: string
          enum:
          {% for format in supported_search_query_formats %}
          - {{ format }}
          {% endfor %}
          default: {{ supported_search_query_formats|first }}
        description: |
          Determines how to treat the query.
          See search help on the <a href="/">main page</a>.
      - name: page
        in: query
        schema:
          type: integer
        description: Page number, for cases with many matches.
      operationId: searchBibItems

      security:
      - DatatrackerAPIKeyAuth: []

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /management/datasets/{dataset}/get-index-status/:
    parameters:
    - name: dataset
      in: path
      description: Dataset ID
      required: true
      schema:
        $ref: '#/components/schemas/IndexableDatasets'
    get:
      summary: Get dataset status
      description: |
        Returns a list of recent indexing tasks for given dataset, starting from most recently started task.
      operationId: getDatasetTaskStatus
      responses:
        200:
          description: successful operation, shows index current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexerStatus'

  /management/datasets/{dataset}/reindex/:
    parameters:
    - name: dataset
      in: path
      description: Dataset ID
      required: true
      schema:
        $ref: '#/components/schemas/IndexableDatasets'
    post:
      summary: (Re)index dataset
      description: |
        Indexing dataset sources is required to enable searching across bibliographic item data.
        Currently, indexing is done manually.
        A call to this endpoint reindexes either the entire dataset or specified refs
        from dataset source(s).
      operationId: indexDataset
      consumes:
      - application/x-www-form-urlencoded
      requestBody:
        description: Indexation options.
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              properties:
                refs:
                  description: Comma-separated list of refs to index (if not provided, the entire dataset is reindexed)
                  type: array
                  items:
                    type: string
            encoding:
              refs:
                style: form
                explode: false
      security:
      - APIKeyAuth: []
      responses:
        200:
          description: Indexing task had been queued (does not mean indexing completed without errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        500:
          description: Queueing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /management/datasets/{dataset}/reset-index/:
    parameters:
    - name: dataset
      in: path
      description: Dataset ID
      required: true
      schema:
        $ref: '#/components/schemas/IndexableDatasets'
    post:
      summary: Clear dataset index
      description: Clears indexed data for given dataset; notably, does not abort any indexing tasks queued or progressing.
      operationId: resetDatasetIndex
      security:
      - APIKeyAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /management/tasks/{task_id}/stop/:
    parameters:
    - name: task_id
      in: path
      description: Task ID. Can be obtained from dataset status endpoint.
      required: true
      schema:
        $ref: '#/components/schemas/IndexableDatasets'
    post:
      summary: Stop task
      description: Revokes given task, and attempts to terminate if running.
      operationId: stopTask
      security:
      - APIKeyAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /management/tasks/stop-all/:
    post:
      summary: Revoke all tasks
      description: Revokes any pending tasks. Tries to terminate already running ones, but no guarantees.
      operationId: stopAllTasks
      security:
      - APIKeyAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /ref/{dataset}/{ref_id}/:
    parameters:
    - name: dataset
      in: path
      description: |
        Dataset ID.

        Note that the schema lists all registered datasets,
        even those from which no bibliographic items are indexed at the moment of viewing this page.
      required: true
      schema:
        $ref: '#/components/schemas/AvailableDatasets'
    - name: ref_id
      in: path
      description: |
        Standard reference, as it appears in source dataset.
        Special characters, such as forward slashes, must be URL-escaped.
      required: true
      schema:
        type: string

    get:
      parameters:
      - name: format
        in: query
        description: |
          Format to return bibliographic item in.
          If `bibxml` is requested, returns an application/xml response;
          otherwise application/json response with Relaton structure under `data` key.
        schema:
          type: string
          default: relaton
          enum: [bibxml, relaton]
      summary: Get bibliographic item by reference in source dataset
      description: |
        This endpoint allows you to retrieve a reference from given dataset.

        For external datasets, this always incurs an additional network request.

        NOTE: This endpoint may not be what you want to use, as datasets represent
        internal sources of bibliographic item data. The /docid/… endpoint allows
        you to get a bibliographic item by document type and ID, which may be more useful.
        External dataset support for this endpoint may be removed.
      operationId: getCitationByReferenceId

      security:
      - DatatrackerAPIKeyAuth: []

      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
                description: BibXML-formatted bibliographic item
            application/json:
              schema:
                $ref: '#/components/schemas/BibliographicItemResponse'

        404:
          description: reference not found in given dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        500:
          description: operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:

  schemas:

    AvailableDoctypes:
      type: string
      enum:
      {% for doctype in known_doctypes %}
      - {{ doctype.0 }}
      {% endfor %}

    AvailableDatasets:
      type: string
      enum:
      {% for ds_id in known_dataset_ids %}
      - {{ ds_id }}
      {% endfor %}

    BibliographicItemResponse:
      type: object
      properties:
        data:
          type: object
          $ref: '#/components/schemas/BibliographicItem'

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: Code for automatic error processing
            message:
              type: string
              description: Human readable error message

    SearchResponse:
      type: object
      properties:
        meta:
          type: object
          required:
            - total
          properties:
            total:
              type: integer
              description: Total number of bibliographic items found for this query.
            next:
              type: string
              description: Domain-relative URL to next batch of search results, if any.
            prev:
              type: string
              description: Domain-relative URL to previous batch of search results, if any.
        data:
          type: array
          items:
            $ref: '#/components/schemas/BibliographicItem'

    IndexableDatasets:
      type: string
      enum:
      {% for ds_id in known_datasets %}
      {% if ds_id not in external_datasets %}
      - {{ ds_id }}
      {% endif %}
      {% endfor %}
      description: |
        For up-to-date list of available datasets,
        see relaton-data-* repositories under ietf-ribose GitHub organization.

    IndexerStatus:
      type: object
      description: Recent dataset indexing task history
      properties:
        tasks:
          description: A list of most recent indexing tasks for given dataset
          type: array
          items:
            type: object
            description: Describes indexing task
            required:
              - task_id
              - status
            properties:
              task_id:
                format: string
                description: Task ID; can be used to cancel this task using the tasks endpoint
              status:
                type: string
                description: Short status keyword (e.g., STARTED, PROGRESS, FAILED or similar; not strictly normalized)

              dataset_id:
                format: string
                description: Dataset ID
              requested_refs:
                type: array
                description: Refs that were requested for indexing
                items:
                  type: string

              started_at:
                type: string
                format: datetime

              action:
                type: string
                description: For a task in progress, human-readable summary of what’s currently happening
              progress:
                description: For a task in progress, completion progress
                type: object
                required:
                  - current
                properties:
                  total:
                    description: Total, e.g. number of source files found
                    type: integer
                  current:
                    description: Current item, e.g. number of indexed files so far
                    type: integer

              completed_at:
                type: string
                format: datetime
                description: For a successful task, completion timestamp
              outcome_summary:
                type: string
                description: For a successful task, human-readable description of the outcome

              error:
                type: object
                description: For a failed task, error details
                properties:
                  type:
                    type: string
                  message:
                    type: string

    SuccessMessage:
      type: object
      description: Generic success response
      properties:
        message:
          type: string
          description: Human-readable success message

    ErrorMessage:
      type: object
      description: Generic error response
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: Code for automatic error processing
            message:
              type: string
              description: Human-readable error message

{{ pre_indented_bibliographic_item_definitions|safe }}

  securitySchemes:
    APIKeyAuth:
      type: apiKey
      in: header
      name: X-IETF-Token
    DatatrackerAPIKeyAuth:
      type: apiKey
      in: header
      name: X-Datatracker-Token
